'''
    设计一个股票模拟交易系统。假设我们有一个很牛叉的AI系统，已经预测到未来一段时间内给定股票的价格，以数组来表示，它的第i个元素是一支给定的股票在第i天的价格。
    假设:
        1. 如果你最多只允许完成两次交易(一次交易是指:买入和卖出);
        2. 你有本金K单位(K >= 1)，一单位本金可以购买1股票;这意味着你寻找的是K单位本金条件下最大利润。ᨀ示:K = 1的时候最简单，可以先考虑。
    设计一个算法来找出最大利润。
'''

'''
整体思路：
    动态规划问题
    先计算当前位置一次进行一次交易的最大利润,保存每个位置的最大利润
    第二次计算，逆序计算，以当前位置作为第二次买入的起点 计算此时第二次购入的最大利润，与前方第一次买入的利润相加，更新总利润
'''


def Profit(prices):
    # 中间的1，2表示允许交易的次数
    # 后面的0，1分别表示没有股票和持有股票
    dp_1_0 = dp_2_0 = 0
    dp_1_1 = dp_2_1 = -float('inf')
    for price in prices:
        # 由于在今天买入卖出的话不赚钱，所以这四个的顺序是任意的。2在前面也可以，嘿嘿
        # 只是更新状态= =不代表一天要操作四次哦，题解写的挺好的非常清楚。
        dp_1_1 = max(dp_1_1, -price)
        dp_1_0 = max(dp_1_0, dp_1_1 + price)
        dp_2_1 = max(dp_2_1, dp_1_0 - price)
        dp_2_0 = max(dp_2_0, dp_2_1 + price)
    return dp_2_0


if __name__ == '__main__':
    prices = [3, 3, 5, 0, 0, 3, 1, 4]  # 测试，可更改
    s = Profit(prices)
    print(s)
